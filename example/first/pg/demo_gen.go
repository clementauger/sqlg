//+build !sqlg

// Code generated by sqlg DO NOT EDIT

package pg

import (
	"bytes"
	"context"
	"database/sql"
	"github.com/clementauger/sqlg/example/first/model"
	sqlg "github.com/clementauger/sqlg/runtime"
	tpl "github.com/clementauger/sqlg/tpl/pg"
	"text/template"
)

var queryTemplatesb9d90b = map[string]*template.Template{
	"myDatastore__GetAuthorsWihNamedIterator": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`SELECT * FROM authors WHERE id={{.id | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}`,
	)),
	"myDatastore__GetSomeAuthors": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`SELECT * FROM authors
		GROUP BY {{.groupby | print}}
		ORDER BY {{.orderby | raw}}
		LIMIT {{.start | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}, {{.end | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}
		`,
	)),
	"myDatastore__CreateAuthors": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`INSERT INTO authors (bio)
		VALUES
		{{range $i, $a := .a}}
		 ( {{$a.Bio | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}} ) {{comma $i $a}}
		{{end}}
	`,
	)),
	"myDatastore__GetAuthor3": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`SELECT {{cols .a "id" | prefix "alias." | convert $.SQLGConverter | glue ","}} FROM authors as alias WHERE alias.id={{.id | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}`,
	)),
	"myDatastore__DeleteAuthor2": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`DELETE FROM authors WHERE id={{.id | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}`,
	)),
	"myDatastore__GetAuthor": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`SELECT * FROM authors WHERE id={{.id | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}`,
	)),
	"myDatastore__GetAuthor2": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`SELECT {{cols .a "id" | convert $.SQLGConverter | glue ","}} FROM authors WHERE id={{.id | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}`,
	)),
	"myDatastore__GetAuthorsWihIterator": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`SELECT * FROM authors WHERE id={{.id | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}`,
	)),
	"myDatastore__GetSomeY": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`SELECT * FROM y`,
	)),
	"myDatastore__CreateAuthor": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`INSERT INTO authors ( {{cols .a "id" | convert $.SQLGConverter | glue ","}} ) VALUES ( {{vals $.SQLGConverter .a "id" | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}} )`,
	)),
	"myDatastore__DeleteAuthor": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`DELETE FROM authors WHERE id={{.id | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}`,
	)),
}

var rawQueriesb9d90b = map[string]string{
	"myDatastore__GetAuthors": `SELECT * FROM authors`,
	"myDatastore__ProductUpdate": `UPDATE products SET price = price * 1.10
  WHERE price <= 99.99
  RETURNING name, price AS new_price`,
}

// MyDatastore stores stuff.
type MyDatastore struct {
	Tracer    sqlg.NilTracer
	Logger    sqlg.NilLogger
	Converter sqlg.ToSnake
}

// MyDatastoreIface is an interface of MyDatastore
type MyDatastoreIface interface {
	CreateSomeValues(ctx context.Context, db sqlg.Execer, v model.SomeType) (id int64, err error)
	DeleteAuthors(ctx context.Context, db sqlg.Execer) (err error)
	DeleteManyAuthors(ctx context.Context, db sqlg.Querier, ids []int) (ab []model.Author, err error)
	CreateAuthor(ctx context.Context, db sqlg.Execer, a model.Author) (id int64, err error)
	CreateAuthors(ctx context.Context, db sqlg.Execer, a []model.Author) (err error)
	DeleteAuthor(ctx context.Context, db sqlg.Execer, id int) (err error)
	DeleteAuthor2(ctx context.Context, db sqlg.Execer, id int) (count int64, err error)
	GetAuthor(ctx context.Context, db sqlg.Querier, id int) (a model.Author, err error)
	GetAuthor2(ctx context.Context, db sqlg.Querier, id int) (a model.Author, err error)
	GetAuthor3(ctx context.Context, db sqlg.Querier, id int) (a model.Author, err error)
	GetAuthors(ctx context.Context, db sqlg.Querier) (a []model.Author, err error)
	GetAuthorsWihIterator(ctx context.Context, db sqlg.Querier, id int) (it AuthorIterator, err error)
	GetAuthorsWihNamedIterator(ctx context.Context, db sqlg.Querier, id int) (it AuthorIterator, err error)
	GetSomeAuthors(ctx context.Context, db sqlg.Querier, u model.Author, start int, end int, orderby string, groupby string) (param0 []model.Author, err error)
	GetSomeY(ctx context.Context, db sqlg.Querier, u model.Y) (param0 []model.Y, err error)
	ProductUpdate(ctx context.Context, db sqlg.Querier) (name string, price int, err error)
}

// AuthorIterator is an iterator of Author
type AuthorIterator struct {
	rows  *sql.Rows
	err   error
	value model.Author
}

func (x AuthorIterator) Err() error {
	if x.err != nil {
		return x.err
	}
	return x.rows.Err()
}

func (x AuthorIterator) All() (ret []model.Author) {
	for x.Next() {
		ret = append(ret, x.Value())
	}
	return ret
}
func (it *AuthorIterator) Value() model.Author {
	return it.value
}
func (it *AuthorIterator) Next() bool {
	if !it.rows.Next() {
		return false
	}
	it.err = it.rows.Scan(&(it.value.ID), &(it.value.Bio))
	if it.err == nil {
		return true
	}
	return false
}

func (m *MyDatastore) CreateAuthor(ctx context.Context, db sqlg.Execer, a model.Author) (id int64, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"a":             a,
			"id":            id,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__CreateAuthor"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "CreateAuthor", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "CreateAuthor", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "CreateAuthor", err)
		}()
	}

	var resb9d90b sql.Result
	resb9d90b, err = db.ExecContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	id, err = resb9d90b.LastInsertId()
	if err != nil {
		return
	}
	return
}

func (m *MyDatastore) CreateAuthors(ctx context.Context, db sqlg.Execer, a []model.Author) (err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"a":             a,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__CreateAuthors"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "CreateAuthors", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "CreateAuthors", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "CreateAuthors", err)
		}()
	}

	_, err = db.ExecContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	return
}

func (m *MyDatastore) DeleteAuthor(ctx context.Context, db sqlg.Execer, id int) (err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"id":            id,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__DeleteAuthor"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthor", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthor", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthor", err)
		}()
	}

	_, err = db.ExecContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	return
}

func (m *MyDatastore) DeleteAuthor2(ctx context.Context, db sqlg.Execer, id int) (count int64, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"id":            id,
			"count":         count,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__DeleteAuthor2"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthor2", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthor2", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthor2", err)
		}()
	}

	var resb9d90b sql.Result
	resb9d90b, err = db.ExecContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	count, err = resb9d90b.RowsAffected()
	if err != nil {
		return
	}
	return
}

// GetAuthor retrieves
// an Author by its ID.
func (m MyDatastore) GetAuthor(ctx context.Context, db sqlg.Querier, id int) (a model.Author, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"id":            id,
			"a":             a,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__GetAuthor"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor", err)
		}()
	}

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	for rowsb9d90b.Next() {
		err = rowsb9d90b.Scan(&a.ID, &a.Bio)
		if err != nil {
			return
		}
	}
	if err = rowsb9d90b.Close(); err != nil {
		return
	}
	err = rowsb9d90b.Err()
	return
}

func (m MyDatastore) GetAuthor2(ctx context.Context, db sqlg.Querier, id int) (a model.Author, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"id":            id,
			"a":             a,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__GetAuthor2"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor2", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor2", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor2", err)
		}()
	}

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	for rowsb9d90b.Next() {
		err = rowsb9d90b.Scan(&a.ID, &a.Bio)
		if err != nil {
			return
		}
	}
	if err = rowsb9d90b.Close(); err != nil {
		return
	}
	err = rowsb9d90b.Err()
	return
}

func (m MyDatastore) GetAuthor3(ctx context.Context, db sqlg.Querier, id int) (a model.Author, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"id":            id,
			"a":             a,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__GetAuthor3"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor3", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor3", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthor3", err)
		}()
	}

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	for rowsb9d90b.Next() {
		err = rowsb9d90b.Scan(&a.ID, &a.Bio)
		if err != nil {
			return
		}
	}
	if err = rowsb9d90b.Close(); err != nil {
		return
	}
	err = rowsb9d90b.Err()
	return
}

func (m *MyDatastore) GetAuthors(ctx context.Context, db sqlg.Querier) (a []model.Author, err error) {
	var sqlQueryb9d90b string
	sqlQueryb9d90b = rawQueriesb9d90b["myDatastore__GetAuthors"]

	m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthors", sqlQueryb9d90b)
	m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthors", sqlQueryb9d90b)
	defer func() {
		m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthors", err)
	}()

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b)
	if err != nil {
		return
	}
	for rowsb9d90b.Next() {
		var itemb9d90b model.Author
		err = rowsb9d90b.Scan(&itemb9d90b.ID, &itemb9d90b.Bio)
		if err != nil {
			return
		}
		a = append(a, itemb9d90b)
	}
	if err = rowsb9d90b.Close(); err != nil {
		return
	}
	err = rowsb9d90b.Err()
	return
}

func (m MyDatastore) GetAuthorsWihIterator(ctx context.Context, db sqlg.Querier, id int) (it AuthorIterator, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"id":            id,
			"it":            it,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__GetAuthorsWihIterator"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthorsWihIterator", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthorsWihIterator", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthorsWihIterator", err)
		}()
	}

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	it.rows = rowsb9d90b
	return
}

func (m MyDatastore) GetAuthorsWihNamedIterator(ctx context.Context, db sqlg.Querier, id int) (it AuthorIterator, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"id":            id,
			"it":            it,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__GetAuthorsWihNamedIterator"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthorsWihNamedIterator", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthorsWihNamedIterator", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "GetAuthorsWihNamedIterator", err)
		}()
	}

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	it.rows = rowsb9d90b
	return
}

func (m *MyDatastore) GetSomeAuthors(ctx context.Context, db sqlg.Querier, u model.Author, start int, end int, orderby string, groupby string) (param0 []model.Author, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"u":             u,
			"start":         start,
			"end":           end,
			"orderby":       orderby,
			"groupby":       groupby,
			"param0":        param0,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__GetSomeAuthors"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "GetSomeAuthors", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "GetSomeAuthors", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "GetSomeAuthors", err)
		}()
	}

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	for rowsb9d90b.Next() {
		var itemb9d90b model.Author
		err = rowsb9d90b.Scan(&itemb9d90b.ID, &itemb9d90b.Bio)
		if err != nil {
			return
		}
		param0 = append(param0, itemb9d90b)
	}
	if err = rowsb9d90b.Close(); err != nil {
		return
	}
	err = rowsb9d90b.Err()
	return
}

func (m *MyDatastore) GetSomeY(ctx context.Context, db sqlg.Querier, u model.Y) (param0 []model.Y, err error) {
	var sqlQueryb9d90b string
	SQLGValuesb9d90b := &[]interface{}{}
	SQLGFlavorb9d90b := "$n"
	{
		var queryb9d90b bytes.Buffer
		templateInputb9d90b := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValuesb9d90b,
			"SQLGFlavor":    SQLGFlavorb9d90b,
			"u":             u,
			"param0":        param0,
			"err":           err,
		}
		err = queryTemplatesb9d90b["myDatastore__GetSomeY"].Execute(&queryb9d90b, templateInputb9d90b)
		if err != nil {
			return
		}
		sqlQueryb9d90b = queryb9d90b.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "GetSomeY", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "GetSomeY", sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "GetSomeY", err)
		}()
	}

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b, (*SQLGValuesb9d90b)...)
	if err != nil {
		return
	}
	for rowsb9d90b.Next() {
		var itemb9d90b model.Y
		err = rowsb9d90b.Scan(&itemb9d90b.W)
		if err != nil {
			return
		}
		param0 = append(param0, itemb9d90b)
	}
	if err = rowsb9d90b.Close(); err != nil {
		return
	}
	err = rowsb9d90b.Err()
	return
}

func (m *MyDatastore) ProductUpdate(ctx context.Context, db sqlg.Querier) (name string, price int, err error) {
	var sqlQueryb9d90b string
	sqlQueryb9d90b = rawQueriesb9d90b["myDatastore__ProductUpdate"]

	m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "ProductUpdate", sqlQueryb9d90b)
	m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "ProductUpdate", sqlQueryb9d90b)
	defer func() {
		m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "ProductUpdate", err)
	}()

	var rowsb9d90b *sql.Rows
	rowsb9d90b, err = db.QueryContext(ctx, sqlQueryb9d90b)
	if err != nil {
		return
	}
	for rowsb9d90b.Next() {
		err = rowsb9d90b.Scan(&name, &price)
		if err != nil {
			return
		}
	}
	if err = rowsb9d90b.Close(); err != nil {
		return
	}
	err = rowsb9d90b.Err()
	return
}

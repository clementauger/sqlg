//+build !sqlg

// Code generated by sqlg DO NOT EDIT

package pg

import (
	"bytes"
	"context"
	"database/sql"
	"github.com/clementauger/sqlg/example/first/model"
	sqlg "github.com/clementauger/sqlg/runtime"
	tpl "github.com/clementauger/sqlg/tpl/pg"
	"text/template"
)

var queryTemplates942046 = map[string]*template.Template{
	"myDatastore__CreateSomeValues": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`INSERT INTO sometype ( {{cols .v "id" | convert $.SQLGConverter | glue ","}} ) VALUES ( {{vals $.SQLGConverter .v "id" "values" | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}, {{.v | pqArray | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}} )`,
	)),
	"myDatastore__DeleteManyAuthors": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`DELETE FROM authors WHERE id ANY ( {{.ids | pqArray | collect $.SQLGValues $.SQLGFlavor | placeholder $.SQLGValues $.SQLGFlavor}}::int[] ) RETURNING *`,
	)),
}

var rawQueries942046 = map[string]string{
	"myDatastore__DeleteAuthors": `DELETE FROM authors WHERE bio = ''`,
}

func (m *MyDatastore) CreateSomeValues(ctx context.Context, db sqlg.Execer, v model.SomeType) (id int64, err error) {
	var sqlQuery942046 string
	SQLGValues942046 := &[]interface{}{}
	SQLGFlavor942046 := "$n"
	{
		var query942046 bytes.Buffer
		templateInput942046 := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValues942046,
			"SQLGFlavor":    SQLGFlavor942046,
			"v":             v,
			"id":            id,
			"err":           err,
		}
		err = queryTemplates942046["myDatastore__CreateSomeValues"].Execute(&query942046, templateInput942046)
		if err != nil {
			return
		}
		sqlQuery942046 = query942046.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "CreateSomeValues", sqlQuery942046, (*SQLGValues942046)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "CreateSomeValues", sqlQuery942046, (*SQLGValues942046)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "CreateSomeValues", err)
		}()
	}

	var res942046 sql.Result
	res942046, err = db.ExecContext(ctx, sqlQuery942046, (*SQLGValues942046)...)
	if err != nil {
		return
	}
	id, err = res942046.LastInsertId()
	if err != nil {
		return
	}
	return
}

func (m MyDatastore) DeleteAuthors(ctx context.Context, db sqlg.Execer) (err error) {
	var sqlQuery942046 string
	sqlQuery942046 = rawQueries942046["myDatastore__DeleteAuthors"]

	m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthors", sqlQuery942046)
	m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthors", sqlQuery942046)
	defer func() {
		m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthors", err)
	}()

	_, err = db.ExecContext(ctx, sqlQuery942046)
	if err != nil {
		return
	}
	return
}

func (m MyDatastore) DeleteManyAuthors(ctx context.Context, db sqlg.Querier, ids []int) (ab []model.Author, err error) {
	var sqlQuery942046 string
	SQLGValues942046 := &[]interface{}{}
	SQLGFlavor942046 := "$n"
	{
		var query942046 bytes.Buffer
		templateInput942046 := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValues942046,
			"SQLGFlavor":    SQLGFlavor942046,
			"ids":           ids,
			"ab":            ab,
			"err":           err,
		}
		err = queryTemplates942046["myDatastore__DeleteManyAuthors"].Execute(&query942046, templateInput942046)
		if err != nil {
			return
		}
		sqlQuery942046 = query942046.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteManyAuthors", sqlQuery942046, (*SQLGValues942046)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteManyAuthors", sqlQuery942046, (*SQLGValues942046)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteManyAuthors", err)
		}()
	}

	var rows942046 *sql.Rows
	rows942046, err = db.QueryContext(ctx, sqlQuery942046, (*SQLGValues942046)...)
	if err != nil {
		return
	}
	for rows942046.Next() {
		var item942046 model.Author
		err = rows942046.Scan(&item942046.ID, &item942046.Bio)
		if err != nil {
			return
		}
		ab = append(ab, item942046)
	}
	if err = rows942046.Close(); err != nil {
		return
	}
	err = rows942046.Err()
	return
}

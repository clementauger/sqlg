//+build !sqlg

// Code generated by sqlg DO NOT EDIT

package mssql

import (
	"bytes"
	"context"
	"fmt"
	"github.com/clementauger/sqlg/example/first/model"
	sqlg "github.com/clementauger/sqlg/runtime"
	tpl "github.com/clementauger/sqlg/tpl/mssql"
	"text/template"
)

var queryTemplates3d2962 = map[string]*template.Template{
	"myDatastore__DeleteManyAuthors": template.Must(template.New("").Funcs(tpl.FuncMap()).Parse(
		`DELETE FROM authors WHERE id IN ( {{.ids | val $.SQLGValues $.SQLGFlavor}} )`,
	)),
}

var rawQueries3d2962 = map[string]string{
	"myDatastore__DeleteAuthors": `DELETE FROM authors WHERE bio = ''`,
}

func (m *MyDatastore) CreateSomeValues(ctx context.Context, db sqlg.Execer, v model.SomeType) (id int64, err error) {
	err = fmt.Errorf("unsupported")
	return
}

// CreateTable authors.
func (m MyDatastore) CreateTable(ctx context.Context, db sqlg.Execer) (err error) {
	err = fmt.Errorf("todo")
	return
}

func (m *MyDatastore) DeleteAuthors(ctx context.Context, db sqlg.Execer) (err error) {
	var sqlQuery3d2962 string
	sqlQuery3d2962 = rawQueries3d2962["myDatastore__DeleteAuthors"]

	m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthors", sqlQuery3d2962)
	m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthors", sqlQuery3d2962)
	defer func() {
		m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteAuthors", err)
	}()

	_, err = db.ExecContext(ctx, sqlQuery3d2962)
	if err != nil {
		return
	}
	return
}

func (m *MyDatastore) DeleteManyAuthors(ctx context.Context, db sqlg.Execer, ids []int) (_ []model.Author, err error) {
	var sqlQuery3d2962 string
	SQLGValues3d2962 := &[]interface{}{}
	SQLGFlavor3d2962 := "@n"
	{
		var query3d2962 bytes.Buffer
		templateInput3d2962 := map[string]interface{}{
			"SQLGConverter": m.Converter,
			"SQLGValues":    SQLGValues3d2962,
			"SQLGFlavor":    SQLGFlavor3d2962,
			"ids":           ids,
			"err":           err,
		}
		err = queryTemplates3d2962["myDatastore__DeleteManyAuthors"].Execute(&query3d2962, templateInput3d2962)
		if err != nil {
			return
		}
		sqlQuery3d2962 = query3d2962.String()

		m.Logger.Log("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteManyAuthors", sqlQuery3d2962, (*SQLGValues3d2962)...)
		m.Tracer.Begin("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteManyAuthors", sqlQuery3d2962, (*SQLGValues3d2962)...)
		defer func() {
			m.Tracer.End("github.com/clementauger/sqlg/example/first/myDatastore", "DeleteManyAuthors", err)
		}()
	}

	_, err = db.ExecContext(ctx, sqlQuery3d2962, (*SQLGValues3d2962)...)
	if err != nil {
		return
	}
	return
}
